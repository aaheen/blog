[{"content":"After several hours of not being able to figure out why I couldn\u0026rsquo;t get images to display properly, I found the solution, and I\u0026rsquo;m both embarassed and relieved that it\u0026rsquo;s way simpler than I thought it was going to be. I simply had to rename selfie-redblue.jpg to selfie.jpg. As of right now, I\u0026rsquo;m too tired to dig into Hugo\u0026rsquo;s documentation to discover why this is the case, but it\u0026rsquo;s currently 03:46 and I desperately need sleep. I\u0026rsquo;m committing and pushing the changes I have now, which is the first time this site is going live. It\u0026rsquo;s probably going to break, and that\u0026rsquo;s okay.\nI have tried my best.\nGoodnight. ","permalink":"https://heen.dev/blog/2022-03-08-file-path-pain/","summary":"After several hours of not being able to figure out why I couldn\u0026rsquo;t get images to display properly, I found the solution, and I\u0026rsquo;m both embarassed and relieved that it\u0026rsquo;s way simpler than I thought it was going to be. I simply had to rename selfie-redblue.jpg to selfie.jpg. As of right now, I\u0026rsquo;m too tired to dig into Hugo\u0026rsquo;s documentation to discover why this is the case, but it\u0026rsquo;s currently 03:46 and I desperately need sleep.","title":"File Path Pain"},{"content":"Example content to fill the page\nI\u0026rsquo;ve been working on this whole endeavor for a few hours, I\u0026rsquo;m currently trying my best to understand how static site generators work.\n","permalink":"https://heen.dev/blog/2022-03-07-first-post-using-hugo/","summary":"Example content to fill the page\nI\u0026rsquo;ve been working on this whole endeavor for a few hours, I\u0026rsquo;m currently trying my best to understand how static site generators work.","title":"First Post Using Hugo"},{"content":"Contained in this GitHub repository are all of my solutions to Project Euler problems, and a simple CLI to run them. The rest of this post is copied straight from the repo\u0026rsquo;s README.\nI have tried to generalize these solutions somewhat, so they can be repurposed later. Each subdirectory of ans is numbered according to the problem it solves on Project Euler. Presently, I have only a few problems solved. If in the future this number grows, I will most likely fork this repository and make it private, leaving only the first 100 open for outside examination.\nStructure:  This is all under the Go module m9ple/euler. main accesses answers through the ans package, through the Sol(p int) and Ask(p int) functions, where p is the problem number. Each problem is contained in its own sub-package of ans, named p\u0026lt;number\u0026gt;. Example: The full name for the package that contains the solution for Problem 3 is m9ple/euler/ans/p3. To get the exact answer for Problem 3, call ans.Sol(3). To run the interactive session for Problem 3, call ans.Ask(3). Note: All of the $$ you see in problem READMEs is just unrendered LaTeX. GitHub does not currently support any easy method of rendering LaTeX. This is such a hotly demanded feature that I have to believe they will do so sometime relatively soon. As such, I\u0026rsquo;m not using any workarounds to display it anyway, because it\u0026rsquo;s too much work.   is a great workaround that I considered using, but decided against it. Codecogs is also a great resource, I just didn\u0026rsquo;t feel like it.    The euler CLI A utility used to run any solution, without having to travel to each solution\u0026rsquo;s directory and go run .\nI am very new to Go, so I\u0026rsquo;m still trying to figure out how to implement this. I\u0026rsquo;m literally just grabbing from two big map[int]func() (declared in probmap.go), where the index corresponds to the problem number. I have struggled trying to come up with a more elegant implementation, but right now I\u0026rsquo;m not sure what that would be.\nUsage: euler \u0026lt;p\u0026gt; - Run the solution for problem \u0026lt;p\u0026gt;. Directly outputs answer -i \u0026lt;p\u0026gt; - Run the interactive solution session for problem \u0026lt;p\u0026gt; -g - Open this repo at github.com/m9ple/euler -g \u0026lt;p\u0026gt; - Open the subdirectory for problem \u0026lt;p\u0026gt; on github. ","permalink":"https://heen.dev/project/euler/","summary":"Contained in this GitHub repository are all of my solutions to Project Euler problems, and a simple CLI to run them. The rest of this post is copied straight from the repo\u0026rsquo;s README.\nI have tried to generalize these solutions somewhat, so they can be repurposed later. Each subdirectory of ans is numbered according to the problem it solves on Project Euler. Presently, I have only a few problems solved. If in the future this number grows, I will most likely fork this repository and make it private, leaving only the first 100 open for outside examination.","title":"Euler"},{"content":"Question Original post on ProjectEuler.net\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6, 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.\n Solution This problem is essentially checking the exact same logic as Fizzbuzz, so I feel there isn\u0026rsquo;t much to be said about the fundamentals of the math and logic behind this.\nThe Go language, however, has a semantically convenient and syntactically beautiful way to implement this. Instead of writing cascading if {} else if {} else {} statements that get tedious and ugly, switch statements without arguments are used. A switch statement without an argument is the same as writing switch true, meaning it will evaluate each case in order until one evaluates to true. This allows me to write more readable code, while also bypassing any extraneous redundancy checking.\n// Returns the sum of all multiples of 3 and 5 below n. func sumThreeFive(n uint64) sum uint64 {  sum = 0 \tfor i := uint64(0); i \u0026lt; n; i++ { \tswitch { \tcase i%3 == 0: \tsum += i \tcase i%5 == 0: \tsum += i \t} \t} \treturn sum } ","permalink":"https://heen.dev/writeup/euler/1/","summary":"Question Original post on ProjectEuler.net\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6, 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.\n Solution This problem is essentially checking the exact same logic as Fizzbuzz, so I feel there isn\u0026rsquo;t much to be said about the fundamentals of the math and logic behind this.","title":"Multiples of 3 or 5"},{"content":"Just some sounds I\u0026rsquo;ve made trying to codify my thoughts and emotions.\n","permalink":"https://heen.dev/music/","summary":"music","title":"Music"}]